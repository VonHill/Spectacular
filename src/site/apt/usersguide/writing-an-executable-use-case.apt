Writing an Executable Use Case

    Writing an executable use case is surprisingly easy!  Open up a text editor,
    and follow a simple template made up of blocks.  A few simple rules:

    * You must follow a particular format with some parts of the use case, but it is mostly free-form.

    * You must start with the Attribute Block, made of key-value pairs of meta data. After this, you specify
    a single Primary Flow and zero or more Alternate Flows.  Finally, at the end, you can describe additional
    Business Rules that are executed in Gherkin.

    * A single use case must be enclosed in a single file.  You cannot have more than one use case per file



* Sample Use Case

+----------------------------------------------
Use Case:  Do something useful
Preconditions: None
Postconditions: None
Actors:  Non-signed up user

Primary Flow:  User signs up for service

1. User navigates to the service landing
(1) System displays the service landing view
2. User expresses intention to sign up for service
(2) System displays the service sign up view
(2) System displays help for the user to sign up
3. User enters pertinent information about the user
4. User submits form
(4) System creates the new user
(4) System sends a welcome email to the new user

Alternate Flow:  User enters email that already exists

3. User enters pertinent information about the user, including an email address that already exists
4. User submits form
(4) System displays an error to the user informing them the email address already exists

Business Rule:  Email Format

    Scenario: Good email address
    When the user enters "test@test.com" as their email address
    Then the system accepts the email address as valid

    Scenario: Malformed email address
    When the user enters "test.test.com" as their email address
    Then the system rejects the email address as malformed

+----------------------------------------------


* Blocks

    An executable use case is made up of a series of blocks - sections that describe the use case and are
    structured in a particular format.

** Attribute Block

+-----------------------------------------------
Use Case:  Do something useful
Preconditions: None
Postconditions: None
Actors:  Non-signed up user
+-----------------------------------------------

    The attribute block must appear first, at the top of your executable use case file.  It describes the essential
    meta data of the use case.  It must be formatted with the name of the meta data, a colon (":"), and the value of
    the meta data.  The required meta data elements are:

    * "Use Case" - The name/title of the use case

    * "Preconditions" - What must the state of the system and/or actors be before starting the use case?

    * "Postconditions" - What must the state of the system and/or actors be after executing the use case?

    * "Actors" - Who are the personas, user types, and or systems involved in executing the use case?

    All other meta data elements are considered optional.


** Primary Flow Block

+-----------------------------------------------
Primary Flow:  User signs up for service

1. User navigates to the service landing
(1) System displays the service landing view
2. User expresses intention to sign up for service
(2) System displays the service sign up view
(2) System displays help for the user to sign up
3. User enters pertinent information about the user
4. User submits form
(4) System creates the new user
(4) System sends a welcome email to the new user

+-----------------------------------------------



** Alternate Flows Block(s)

+-----------------------------------------------
Alternate Flow:  User enters email that already exists

3. User enters pertinent information about the user, including an email address that already exists
4. User submits form
(4) System displays an error to the user informing them the email address already exists

+-----------------------------------------------


** Business Rules

+-----------------------------------------------

Business Rule:  Email Format

    Scenario: Good email address
    When the user enters "test@test.com" as their email address
    Then the system accepts the email address as valid

    Scenario: Malformed email address
    When the user enters "test.test.com" as their email address
    Then the system rejects the email address as malformed

+-----------------------------------------------
